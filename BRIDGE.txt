import java.util.Scanner;  
public class HelloWorld{

public static void main(String args[]){  
    
    int [] treElem={2, 3, 32, 43, 8};
    int numOfElem=5;
    int [][] nodesElem={{1,2},{1,3},{2,4},{3,5}};
    //int [][] nodesElem={{5,7},{6,7},{1,3},{2,4},{4,6},{3,5}};
    
    int [] treElemArn=new int[numOfElem];
        int initA=nodesElem[0][0];
        int initB=nodesElem[0][1];
    String index=initA+","+initB;
    
    String[] words=index.split(",");
    
    while(words.length < numOfElem){
        for(int i=1;i<numOfElem-1;i++){
            int A=nodesElem[i][0];
            int B=nodesElem[i][1];
            
            if(initA == A){
                index=B+","+index;
                initA = B;
                nodesElem[i][0]=0;
                nodesElem[i][1]=0;
                break;
            }
            if(initA == B){
                index=A+","+index;
                initA = A;
                nodesElem[i][0]=0;
                nodesElem[i][1]=0;
                break;
            }
            if(initB == A){
                index=index+","+B;
                initB = B;
                nodesElem[i][0]=0;
                nodesElem[i][1]=0;
                break;
            }
            if(initB == B){
                index=index+","+A;
                initB = A;
                nodesElem[i][0]=0;
                nodesElem[i][1]=0;
                break;
            }
        }
    words=index.split(",");
    }
    
    
    for(int i=0;i<words.length;i++){
        treElemArn[i]=treElem[Integer.parseInt(words[i])-1];
    }
    for(int i=0;i<treElemArn.length;i++){
        System.out.println(treElemArn[i]);
    }
    
    
    
 }  
}





/* IMPORTANT: Multiple classes and nested static classes are supported */

/*
 * uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;

//import for Scanner and other utility classes
import java.util.*;
*/

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail
import java.util.*;
class TestClass {
    public static void main(String args[] ) throws Exception {
        /* Sample code to perform I/O:
         * Use either of these methods for input

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String name = br.readLine();                // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        //Scanner
        Scanner s = new Scanner(System.in);
        String name = s.nextLine();                 // Reading input from STDIN
        System.out.println("Hi, " + name + ".");    // Writing output to STDOUT

        */

        // Write your code here
        Scanner s = new Scanner(System.in);
        String numOfElemStr = s.nextLine();                 // Reading input from STDIN
        int numOfElem=Integer.parseInt(numOfElemStr);
        
        String elemStr = s.nextLine();
        String treElemStr[] = elemStr.split("\\s");
        int treElem[]=new int[treElemStr.length];
        
        for (int k=0;k<treElem.length;k++){
            treElem[k++] = Integer.parseInt(treElemStr[k]);
        }
    
        
        int maxNum=0;
        
        
        for(int m=0;m<treElem.length;m++){
            if(maxNum < treElem[m]){
                maxNum = treElem[m];
            }
        }
        
        String binaryStrng[]=new String[numOfElem];
        for(int n=0;n<treElem.length;n++){
            binaryStrng[n]=Integer.toBinaryString(treElem[n]);
            System.out.println( binaryStrng[n]);
        }
        
        int numOfBits=Integer.toBinaryString(maxNum).length();
        int bitsArray[]=new int[numOfBits];
        
        for(int i=0;i<bitsArray.length;i++){
            int numOfOnes=0;
            for(int j=0;j<binaryStrng.length;j++){
                if(binaryStrng[j].length() > i){
                    if(binaryStrng[j].charAt(binaryStrng[j].length() - 1-i) == '1'){
                        numOfOnes++;
                    }
                }
            }
            bitsArray[i]=numOfOnes;
        }
        System.out.println(bitsArray[bitsArray.length-1]);
    }
}
