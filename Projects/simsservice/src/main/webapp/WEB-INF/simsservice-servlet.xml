<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/mvc
        					http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        					http://www.springframework.org/schema/tx
        					http://www.springframework.org/schema/tx/spring-tx.xsd
        					http://cxf.apache.org/jaxrs
	   				     	http://cxf.apache.org/schemas/jaxrs.xsd
	   				     	http://www.springframework.org/schema/util
	   				     	http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<context:annotation-config/>
	<context:component-scan base-package="com.simsservice"/>
	<mvc:annotation-driven/>
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Rest Service Beans Start Here -->
	<bean id="loginWebService" class="com.simsservice.webservice.LoginWsImpl"/>
	<bean id="designationWebService" class="com.simsservice.webservice.DesignationWsImpl"/>
	<!-- Swagger API listing resource -->
	<bean id="swaggerResourceJSON" class="com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON" />

	<!-- Swagger writers -->
	<bean id="resourceWriter"  class="com.wordnik.swagger.jaxrs.listing.ResourceListingProvider" />
	<bean id="apiWriter" class="com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider" />

	<jaxrs:server address="/webservice" id="swagger">
		<jaxrs:serviceBeans>
			<ref bean="swaggerResourceJSON" />
			<ref bean="loginWebService" />
			<ref bean="designationWebService" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
			<ref bean="resourceWriter" />
			<ref bean="apiWriter" />
		</jaxrs:providers>
	</jaxrs:server>

	<bean id="swaggerConfig" class="com.wordnik.swagger.jaxrs.config.BeanConfig">
		<property name="resourcePackage" value="com.simsservice.webservice" />
		<property name="version" value="2.0" />
		<property name="basePath" value="http://localhost:8080/simsservice/webservice" />
		<property name="title" value="REST simsser webservices" />
		<property name="description" value="Swagger UI Integration for REST simsser webservices." />
		<property name="contact" value="ninganna.c@spanservices.com" />
		<property name="scan" value="true" />
	</bean>
	
	<!-- hibernate configuration -->
	<bean id="propertyPlaceHolder"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:config.properties</value>
		</property>
	</bean>
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${database.driver}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="hibernateProperties">
			<map>
				<entry key="hibernate.dialect" value="${hibernate.jdbc.dialect}" />
				<entry key="hibernate.show_sql" value="true" />
				<entry key="hibernate.hbm2ddl.auto" value="update"/>
			</map>
		</property>
	</bean>
	
	<!-- Apache Shiro COnfiguration For Login -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<property name="securityManager" ref="securityManager"/>
    	<property name="loginUrl" value="/"/>
    	<property name="successUrl" value="/ui/" />
        <property name="filters">
            <util:map>
                <entry key="restAuthcBasic">
                    <bean class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        
     <property name="filterChainDefinitions">
        	<value>
            	/templates/**=user, perms
            	/ui/**=user, perms
            	/webservice/** = restAuthcBasic 
        	</value>
    	</property>
	</bean>
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="dataSource"/>
        <property name="credentialsMatcher">
             <bean class="org.apache.shiro.authc.credential.PasswordMatcher">
                 <property name="passwordService" ref="defaultPasswordService"/>
             </bean>
         </property>
       <property name="authenticationQuery" value="SELECT u.password FROM sims_service.user u WHERE u.login_id= ?" />
     </bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="myRealm"/>   
	</bean>
	<bean id="defaultPasswordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
                 <property name="hashService.hashAlgorithmName" value="MD5"/>
                 <property name="hashService.hashIterations" value="1024"/>
    </bean>
    
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>