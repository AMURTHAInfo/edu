Javascript Functions

	General functions
	Annonymous functions/ function ecpression
	IIFE
	fuction arguments and callback
	arguments.length - n numer of arguments to a function
	functions can be nested
	scope of nested functions is local to their parent/ cannot executed  in outer the parent
	function can return function too / clouser
	inner functions can be assigned to outer functions
	Array elements can be functions too
	Events can be attached to the functions event handlers.
	
	Function.prototype.apply() The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).
	Function.prototype.bind()  The bind() method creates a new function that, when called, has its this keyword set to the provided value,
	Function.prototype.call()  The call() method calls a function with a given this value and arguments provided individually.
	
	Note: While the syntax of this function is almost identical to that of call(), the fundamental difference is that call() accepts an argument list, 
	while apply() accepts a single array of arguments.

	A function can refer to and call itself. There are three ways for a function to refer to itself:
		the function's name
		arguments.callee
		an in-scope variable that refers to the function
JavaScript Objects
	new Object();
	{}
	Object.keys
	var key in object
	with(o){} 
	

JavaScript Strings
	Property	 Description
	constructor	 Returns the string's constructor function
	length	     Returns the length of a string
	prototype	 Allows you to add properties and methods to an object

	
	Method				Description
	charAt()			Returns the character at the specified index (position)
	charCodeAt()		Returns the Unicode of the character at the specified index
	concat()			Joins two or more strings, and returns a new joined strings
	endsWith()			Checks whether a string ends with specified string/characters
	fromCharCode()		Converts Unicode values to characters
	includes()			Checks whether a string contains the specified string/characters
	indexOf()			Returns the position of the first found occurrence of a specified value in a string
	lastIndexOf()		Returns the position of the last found occurrence of a specified value in a string
	localeCompare()		Compares two strings in the current locale
	match()				Searches a string for a match against a regular expression, and returns the matches
	repeat()			Returns a new string with a specified number of copies of an existing string
	replace()			Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
	search()			Searches a string for a specified value, or regular expression, and returns the position of the match
	slice()				Extracts a part of a string and returns a new string
	split()				Splits a string into an array of substrings
	startsWith()		Checks whether a string begins with specified characters
	substr()			Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
	substring()			Extracts the characters from a string, between two specified indices
	toLocaleLowerCase()	Converts a string to lowercase letters, according to the host's locale
	toLocaleUpperCase()	Converts a string to uppercase letters, according to the host's locale
	toLowerCase()		Converts a string to lowercase letters
	toString()			Returns the value of a String object
	toUpperCase()		Converts a string to uppercase letters
	trim()				Removes whitespace from both ends of a string
	valueOf()			Returns the primitive value of a String object

JavaScript Number

	NaN is a JavaScript reserved word indicating that a number is not a legal number.
	typeof NaN returns number:
	Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible numbe
	typeof Infinity returns number.
	
	Property			Description
	constructor			Returns the function that created JavaScript's Number prototype
	MAX_VALUE			Returns the largest number possible in JavaScript
	MIN_VALUE			eturns the smallest number possible in JavaScript
	NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
	NaN					Represents a "Not-a-Number" value
	POSITIVE_INFINITY	Represents infinity (returned on overflow)
	prototype			Allows you to add properties and methods to an object
	
	
	isFinite()			Checks whether a value is a finite number
	isInteger()			Checks whether a value is an integer
	isNaN()				Cecks whether a value is Number.NaN
	isSafeInteger()		Checks whether a value is a safe integer
	toExponential(x)	Converts a number into an exponential notation
	toFixed(x)			Formats a number with x numbers of digits after the decimal point
	toPrecision(x)		Formats a number to x length
	toString()			Converts a number to a string
	valueOf()			Returns the primitive value of a number
	
	
JavaScript Arrays	

	The typeof operator returns object because a JavaScript array is an object.
	var cars = new Array("Saab", "Volvo", "BMW");
	var cars = ["Saab", "Volvo", "BMW"];
	Arrays with named indexes are called associative arrays (or hashes).
	in JavaScript, arrays use numbered indexes.  
	In JavaScript, objects use named indexes.
	var points = new Array(40);       // Creates aZn array with 40 undefined elements !!!!!
	
	
	How to Recognize an Array
	Array.isArray(fruits);     // returns true
	x.constructor.toString().indexOf("Array") > -1;
	fruits instanceof Array 
	
	delete fruits[0];  
	
	Property		Description
	constructor		Returns the function that created the Array object's prototype
	length			Sets or returns the number of elements in an array
	prototype		Allows you to add properties and methods to an Array object
	
	
	Method			Description
	concat()		Joins two or more arrays, and returns a copy of the joined arrays
	copyWithin()	Copies array elements within the array, to and from specified positions
	entries()		Returns a key/value pair Array Iteration Object
	every()			Checks if every element in an array pass a test
	fill()			Fill the elements in an array with a static value
	filter()		Creates a new array with every element in an array that pass a test
	find()			Returns the value of the first element in an array that pass a test
	findIndex()		Returns the index of the first element in an array that pass a test
	forEach()		Calls a function for each array element
	from()			Creates an array from an object
	includes()		Check if an array contains the specified element
	indexOf()		Search the array for an element and returns its position
	isArray()		Checks whether an object is an array
	join()			Joins all elements of an array into a string
	keys()			Returns a Array Iteration Object, containing the keys of the original array
	lastIndexOf()	Search the array for an element, starting at the end, and returns its position
	map()			Creates a new array with the result of calling a function for each array element
	pop()			Removes the last element of an array, and returns that element
	push()			Adds new elements to the end of an array, and returns the new length
	reduce()		Reduce the values of an array to a single value (going left-to-right)
	reduceRight()	Reduce the values of an array to a single value (going right-to-left)
	reverse()		Reverses the order of the elements in an array
	shift()			Removes the first element of an array, and returns that element
	slice()			Selects a part of an array, and returns the new array
	some()			Checks if any of the elements in an array pass a test
	sort()			Sorts the elements of an array
	splice()		Adds/Removes elements from an array
	toString()		Converts an array to a string, and returns the result
	unshift()		Adds new elements to the beginning of an array, and returns the new length
	valueOf()		Returns the primitive value of an array
	
	
Math Object

	Property	Description
	E			Returns Euler's number (approx. 2.718)
	LN2			Returns the natural logarithm of 2 (approx. 0.693)
	LN10		Returns the natural logarithm of 10 (approx. 2.302)
	LOG2E		Returns the base-2 logarithm of E (approx. 1.442)
	LOG10E		Returns the base-10 logarithm of E (approx. 0.434)
	PI			Returns PI (approx. 3.14)
	SQRT1_2		Returns the square root of 1/2 (approx. 0.707)
	SQRT2		Returns the square root of 2 (approx. 1.414)
	
	Method					Description
	abs(x)					Returns the absolute value of x
	acos(x)					Returns the arccosine of x, in radians
	acosh(x)				Returns the hyperbolic arccosine of x
	asin(x)					Returns the arcsine of x, in radians
	asinh(x)				Returns the hyperbolic arcsine of x
	atan(x)					Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
	atan2(y, x)				Returns the arctangent of the quotient of its arguments
	atanh(x)				Returns the hyperbolic arctangent of x
	cbrt(x)					Returns the cubic root of x
	ceil(x)					Returns x, rounded upwards to the nearest integer
	cos(x)					Returns the cosine of x (x is in radians)
	cosh(x)					Returns the hyperbolic cosine of x
	exp(x)					Returns the value of Ex
	floor(x)				Returns x, rounded downwards to the nearest integer
	log(x)					Returns the natural logarithm (base E) of x
	max(x, y, z, ..., n)	Returns the number with the highest value
	min(x, y, z, ..., n)	Returns the number with the lowest value
	pow(x, y)				Returns the value of x to the power of y
	random()				Returns a random number between 0 and 1
	round(x)				Rounds x to the nearest integer
	sin(x)					Returns the sine of x (x is in radians)
	sinh(x)					Returns the hyperbolic sine of x
	sqrt(x)					Returns the square root of x
	tan(x)					Returns the tangent of an angle
	tanh(x)					Returns the hyperbolic tangent of a number
	trunc(x)				Returns the integer part of a number (x)
	
	
JavaScript Booleans
	Everything With a "Value" is True
	Everything Without a "Value" is False
	
JavaScript Comparison and Logical Operators

	Operator	Description					Comparing		Returns		Try it
	==			equal to					x == 8			false	
											x == 5			true	
											x == "5"		true	
	===			equal value and equal type	x === 5			true	
											x === "5"		false	
	!=			not equal					x != 8			true	
	!==			not equal value or type		x !== 5			false	
											x !== "5"		true	
											x !== 8			true	
	>			greater than				x > 8			false	
	<			less than					x < 8			true	
	>=			greater than or equal to	x >= 8			false	
	<=			less than or equal to		x <= 8			true	
	
Conditional Statements
	Use if to specify a block of code to be executed, if a specified condition is true
	Use else to specify a block of code to be executed, if the same condition is false
	Use else if to specify a new condition to test, if the first condition is false
	Use switch to specify many alternative blocks of code to be executed	
	
JavaScript Loops

	for - loops through a block of code a number of times
	for/in - loops through the properties of an object
	while - loops through a block of code while a specified condition is true
	do/while - also loops through a block of code while a specified condition is true
	
JavaScript Break and Continue

	The break statement "jumps out" of a loop.
	The continue statement "jumps over" one iteration in the loop.
	To label JavaScript statements you precede the statements with a label name and a colon:

JavaScript Data Types
	In JavaScript there are 5 different data types that can contain values:
	string
	number
	boolean
	object
	function
	
	There are 3 types of objects:
	Object
	Date
	Array
	
	And 2 data types that cannot contain values:
	null
	undefined
	
JavaScript Type Conversion	
	
	OriginalValue			Convertedto Number	Convertedto String	Convertedto Boolean
	false					0					"false"				false	
	true					1					"true"				true	
	0						0					"0"					false	
	1						1					"1"					true	
	"0"						0					"0"					true	
	"000"					0					"000"				true	
	"1"						1					"1"					true	
	NaN						NaN					"NaN"				false	
	Infinity				Infinity			"Infinity"			true	
	-Infinity				-Infinity			"-Infinity"			true	
	""						0					""					false	
	"20"					20					"20"				true	
	"twenty"				NaN					"twenty"			true	
	[ ]						0					""					true	
	[20]					20					"20"				true	
	[10,20]					NaN					"10,20"				true	
	["twenty"]				NaN					"twenty"			true	
	["ten","twenty"]		NaN					"ten,twenty"		true	
	function(){}			NaN					"function(){}"		true	
	{ }						NaN					"[object Object]"	true	
	null					0					"null"				false	
	undefined				NaN					"undefined"			false

Regular Expression
	Modifier	Description
	i			Perform case-insensitive matching
	g			Perform a global match (find all matches rather than stopping after the first match)
	m			Perform multiline matching
Brackets
	Expression	Description
	[abc]		Find any character between the brackets
	[^abc]		Find any character NOT between the brackets
	[0-9]		Find any character between the brackets (any digit)
	[^0-9]		Find any character NOT between the brackets (any non-digit)
	(x|y)		Find any of the alternatives specified
	
	Metacharacter	Description
	.				Find a single character, except newline or line terminator
	\w				Find a word character
	\W				Find a non-word character
	\d				Find a digit
	\D				Find a non-digit character
	\s				Find a whitespace character
	\S				Find a non-whitespace character
	\b				Find a match at the beginning/end of a word
	\B				Find a match not at the beginning/end of a word
	\0				Find a NUL character
	\n				Find a new line character
	\f				Find a form feed character
	\r				Find a carriage return character
	\t				Find a tab character
	\v				Find a vertical tab character
	\xxx			Find the character specified by an octal number xxx
	\xdd			Find the character specified by a hexadecimal number dd
	\uxxxx			Find the Unicode character specified by a hexadecimal number xxxx
	
	Quantifier	Description
	n+			Matches any string that contains at least one n
	n*			Matches any string that contains zero or more occurrences of n
	n?			Matches any string that contains zero or one occurrences of n
	n{X}		Matches any string that contains a sequence of X n's
	n{X,Y}		Matches any string that contains a sequence of X to Y n's
	n{X,}		Matches any string that contains a sequence of at least X n's
	n$			Matches any string with n at the end of it
	^n			Matches any string with n at the beginning of it
	?=n			Matches any string that is followed by a specific string n
	?!n			Matches any string that is not followed by a specific string n
	
	Property		Description
	constructor		Returns the function that created the RegExp object's prototype
	global			Checks whether the "g" modifier is set
	ignoreCase		Checks whether the "i" modifier is set
	lastIndex		Specifies the index at which to start the next match
	multiline		Checks whether the "m" modifier is set
	source			Returns the text of the RegExp pattern

	Method		Description
	compile()	Deprecated in version 1.5. Compiles a regular expression
	exec()		Tests for a match in a string. Returns the first match
	test()		Tests for a match in a string. Returns true or false
	toString()	Returns the string value of the regular expression
	
JavaScript Errors - Throw and Try to Catch
	The try statement lets you test a block of code for errors.
	The catch statement lets you handle the error.
	The throw statement lets you create custom errors.
	The finally statement lets you execute code, after try and catch, regardless of the result.
	
JavaScript Debugging
	The console.log() Method
	The debugger Keyword

JavaScript Hoisting
	Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope
	(to the top of the current script or the current function).
	
JavaScript Use Strict
	The "use strict" directive is new in JavaScript 1.8.5 (ECMAScript version 5).
	It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
	The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
	With strict mode, you can not, for example, use undeclared variables.

	Strict mode makes it easier to write "secure" JavaScript.
	Strict mode changes previously accepted "bad syntax" into real errors.
	As an example, in normal JavaScript, mistyping a variable name creates a new global variable. 
	In strict mode, this will throw an error, making it impossible to accidentally create a global variable.
	In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.
	In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property,
	a non-existing variable, or a non-existing object, will throw an error.

	Deleting a function is not allowed.
	Deleting a variable (or object) is not allowed.
	sing a variable, without declaring it, is not allowed:
	Using an object, without declaring it, is not allowed:
	Duplicating a parameter name is not allowed:
	Octal numeric literals are not allowed: var x = 010; 
	ctal escape characters are not allowed: var x = "\010";
	Writing to a read-only property is not allowed:
	Writing to a get-only property is not allowed:
	Deleting an undeletable property is not allowed:
	The string "eval" cannot be used as a variable:
	The string "arguments" cannot be used as a variable:
	The with statement is not allowed:
	In function calls like f(), the this value was the global object. In strict mode, it is now undefined.
	
	Future Proof!
	Future reserved keywords are not allowed in strict mode. These are:
	implements
	interface
	let
	package
	private
	protected
	public
	static
	yield
	
Inheritance with the prototype chain

	Following the ECMAScript standard, the notation someObject.[[Prototype]] is used to designate the prototype of someObject. 
	Since ECMAScript 2015, the [[Prototype]] is accessed using the accessors Object.getPrototypeOf() and Object.setPrototypeOf(). 
	This is equivalent to the JavaScript property __proto__ which is non-standard but de-facto implemented by many browsers.
	f.prototype.b = 3;
	var p = Object.create(o);
	One misfeature that is often used is to extend Object.prototype or one of the other built-in prototypes.
	This technique is called monkey patching and breaks encapsulation
	is necessary to use the hasOwnProperty method which all objects inherit from Object.prototype.