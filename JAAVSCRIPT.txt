Javascript Functions

	General functions
	Annonymous functions/ function ecpression
	IIFE
	fuction arguments and callback
	arguments.length - n numer of arguments to a function
	functions can be nested
	scope of nested functions is local to their parent/ cannot executed  in outer the parent
	function can return function too / clouser
	inner functions can be assigned to outer functions
	Array elements can be functions too
	Events can be attached to the functions event handlers.
	
	Function.prototype.apply() The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).
	Function.prototype.bind()  The bind() method creates a new function that, when called, has its this keyword set to the provided value,
	Function.prototype.call()  The call() method calls a function with a given this value and arguments provided individually.
	
	Note: While the syntax of this function is almost identical to that of call(), the fundamental difference is that call() accepts an argument list, 
	while apply() accepts a single array of arguments.

	A function can refer to and call itself. There are three ways for a function to refer to itself:
		the function's name
		arguments.callee
		an in-scope variable that refers to the function
JavaScript Objects
	new Object();
	{}
	Object.keys
	var key in object
	with(o){} 
	

JavaScript Strings
	Property	 Description
	constructor	 Returns the string's constructor function
	length	     Returns the length of a string
	prototype	 Allows you to add properties and methods to an object

	
	Method				Description
	charAt()			Returns the character at the specified index (position)
	charCodeAt()		Returns the Unicode of the character at the specified index
	concat()			Joins two or more strings, and returns a new joined strings
	endsWith()			Checks whether a string ends with specified string/characters
	fromCharCode()		Converts Unicode values to characters
	includes()			Checks whether a string contains the specified string/characters
	indexOf()			Returns the position of the first found occurrence of a specified value in a string
	lastIndexOf()		Returns the position of the last found occurrence of a specified value in a string
	localeCompare()		Compares two strings in the current locale
	match()				Searches a string for a match against a regular expression, and returns the matches
	repeat()			Returns a new string with a specified number of copies of an existing string
	replace()			Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
	search()			Searches a string for a specified value, or regular expression, and returns the position of the match
	slice()				Extracts a part of a string and returns a new string
	split()				Splits a string into an array of substrings
	startsWith()		Checks whether a string begins with specified characters
	substr()			Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
	substring()			Extracts the characters from a string, between two specified indices
	toLocaleLowerCase()	Converts a string to lowercase letters, according to the host's locale
	toLocaleUpperCase()	Converts a string to uppercase letters, according to the host's locale
	toLowerCase()		Converts a string to lowercase letters
	toString()			Returns the value of a String object
	toUpperCase()		Converts a string to uppercase letters
	trim()				Removes whitespace from both ends of a string
	valueOf()			Returns the primitive value of a String object

JavaScript Number

	NaN is a JavaScript reserved word indicating that a number is not a legal number.
	typeof NaN returns number:
	Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible numbe
	typeof Infinity returns number.
	
	Property			Description
	constructor			Returns the function that created JavaScript's Number prototype
	MAX_VALUE			Returns the largest number possible in JavaScript
	MIN_VALUE			eturns the smallest number possible in JavaScript
	NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
	NaN					Represents a "Not-a-Number" value
	POSITIVE_INFINITY	Represents infinity (returned on overflow)
	prototype			Allows you to add properties and methods to an object
	
	
	isFinite()			Checks whether a value is a finite number
	isInteger()			Checks whether a value is an integer
	isNaN()				Cecks whether a value is Number.NaN
	isSafeInteger()		Checks whether a value is a safe integer
	toExponential(x)	Converts a number into an exponential notation
	toFixed(x)			Formats a number with x numbers of digits after the decimal point
	toPrecision(x)		Formats a number to x length
	toString()			Converts a number to a string
	valueOf()			Returns the primitive value of a number
	
	
JavaScript Arrays	

	The typeof operator returns object because a JavaScript array is an object.
	var cars = new Array("Saab", "Volvo", "BMW");
	var cars = ["Saab", "Volvo", "BMW"];
	Arrays with named indexes are called associative arrays (or hashes).
	in JavaScript, arrays use numbered indexes.  
	In JavaScript, objects use named indexes.
	var points = new Array(40);       // Creates aZn array with 40 undefined elements !!!!!
	
	
	How to Recognize an Array
	Array.isArray(fruits);     // returns true
	x.constructor.toString().indexOf("Array") > -1;
	fruits instanceof Array 
	
	delete fruits[0];  
	
	Property		Description
	constructor		Returns the function that created the Array object's prototype
	length			Sets or returns the number of elements in an array
	prototype		Allows you to add properties and methods to an Array object
	
	
	Method			Description
	concat()		Joins two or more arrays, and returns a copy of the joined arrays
	copyWithin()	Copies array elements within the array, to and from specified positions
	entries()		Returns a key/value pair Array Iteration Object
	every()			Checks if every element in an array pass a test
	fill()			Fill the elements in an array with a static value
	filter()		Creates a new array with every element in an array that pass a test
	find()			Returns the value of the first element in an array that pass a test
	findIndex()		Returns the index of the first element in an array that pass a test
	forEach()		Calls a function for each array element
	from()			Creates an array from an object
	includes()		Check if an array contains the specified element
	indexOf()		Search the array for an element and returns its position
	isArray()		Checks whether an object is an array
	join()			Joins all elements of an array into a string
	keys()			Returns a Array Iteration Object, containing the keys of the original array
	lastIndexOf()	Search the array for an element, starting at the end, and returns its position
	map()			Creates a new array with the result of calling a function for each array element
	pop()			Removes the last element of an array, and returns that element
	push()			Adds new elements to the end of an array, and returns the new length
	reduce()		Reduce the values of an array to a single value (going left-to-right)
	reduceRight()	Reduce the values of an array to a single value (going right-to-left)
	reverse()		Reverses the order of the elements in an array
	shift()			Removes the first element of an array, and returns that element
	slice()			Selects a part of an array, and returns the new array
	some()			Checks if any of the elements in an array pass a test
	sort()			Sorts the elements of an array
	splice()		Adds/Removes elements from an array
	toString()		Converts an array to a string, and returns the result
	unshift()		Adds new elements to the beginning of an array, and returns the new length
	valueOf()		Returns the primitive value of an array
	
	
Math Object

	Property	Description
	E			Returns Euler's number (approx. 2.718)
	LN2			Returns the natural logarithm of 2 (approx. 0.693)
	LN10		Returns the natural logarithm of 10 (approx. 2.302)
	LOG2E		Returns the base-2 logarithm of E (approx. 1.442)
	LOG10E		Returns the base-10 logarithm of E (approx. 0.434)
	PI			Returns PI (approx. 3.14)
	SQRT1_2		Returns the square root of 1/2 (approx. 0.707)
	SQRT2		Returns the square root of 2 (approx. 1.414)
	
	Method					Description
	abs(x)					Returns the absolute value of x
	acos(x)					Returns the arccosine of x, in radians
	acosh(x)				Returns the hyperbolic arccosine of x
	asin(x)					Returns the arcsine of x, in radians
	asinh(x)				Returns the hyperbolic arcsine of x
	atan(x)					Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
	atan2(y, x)				Returns the arctangent of the quotient of its arguments
	atanh(x)				Returns the hyperbolic arctangent of x
	cbrt(x)					Returns the cubic root of x
	ceil(x)					Returns x, rounded upwards to the nearest integer
	cos(x)					Returns the cosine of x (x is in radians)
	cosh(x)					Returns the hyperbolic cosine of x
	exp(x)					Returns the value of Ex
	floor(x)				Returns x, rounded downwards to the nearest integer
	log(x)					Returns the natural logarithm (base E) of x
	max(x, y, z, ..., n)	Returns the number with the highest value
	min(x, y, z, ..., n)	Returns the number with the lowest value
	pow(x, y)				Returns the value of x to the power of y
	random()				Returns a random number between 0 and 1
	round(x)				Rounds x to the nearest integer
	sin(x)					Returns the sine of x (x is in radians)
	sinh(x)					Returns the hyperbolic sine of x
	sqrt(x)					Returns the square root of x
	tan(x)					Returns the tangent of an angle
	tanh(x)					Returns the hyperbolic tangent of a number
	trunc(x)				Returns the integer part of a number (x)
	
	
JavaScript Booleans
	Everything With a "Value" is True
	Everything Without a "Value" is False
	
JavaScript Comparison and Logical Operators

	Operator	Description					Comparing		Returns		Try it
	==			equal to					x == 8			false	
											x == 5			true	
											x == "5"		true	
	===			equal value and equal type	x === 5			true	
											x === "5"		false	
	!=			not equal					x != 8			true	
	!==			not equal value or type		x !== 5			false	
											x !== "5"		true	
											x !== 8			true	
	>			greater than				x > 8			false	
	<			less than					x < 8			true	
	>=			greater than or equal to	x >= 8			false	
	<=			less than or equal to		x <= 8			true	
	
Conditional Statements
	Use if to specify a block of code to be executed, if a specified condition is true
	Use else to specify a block of code to be executed, if the same condition is false
	Use else if to specify a new condition to test, if the first condition is false
	Use switch to specify many alternative blocks of code to be executed	
	
JavaScript Loops

	for - loops through a block of code a number of times
	for/in - loops through the properties of an object
	while - loops through a block of code while a specified condition is true
	do/while - also loops through a block of code while a specified condition is true
	
JavaScript Break and Continue

	The break statement "jumps out" of a loop.
	The continue statement "jumps over" one iteration in the loop.
	To label JavaScript statements you precede the statements with a label name and a colon:

JavaScript Data Types
	In JavaScript there are 5 different data types that can contain values:
	string
	number
	boolean
	object
	function
	
	There are 3 types of objects:
	Object
	Date
	Array
	
	And 2 data types that cannot contain values:
	null
	undefined
	
JavaScript Type Conversion	
	
	OriginalValue			Convertedto Number	Convertedto String	Convertedto Boolean
	false					0					"false"				false	
	true					1					"true"				true	
	0						0					"0"					false	
	1						1					"1"					true	
	"0"						0					"0"					true	
	"000"					0					"000"				true	
	"1"						1					"1"					true	
	NaN						NaN					"NaN"				false	
	Infinity				Infinity			"Infinity"			true	
	-Infinity				-Infinity			"-Infinity"			true	
	""						0					""					false	
	"20"					20					"20"				true	
	"twenty"				NaN					"twenty"			true	
	[ ]						0					""					true	
	[20]					20					"20"				true	
	[10,20]					NaN					"10,20"				true	
	["twenty"]				NaN					"twenty"			true	
	["ten","twenty"]		NaN					"ten,twenty"		true	
	function(){}			NaN					"function(){}"		true	
	{ }						NaN					"[object Object]"	true	
	null					0					"null"				false	
	undefined				NaN					"undefined"			false

Regular Expression
	Modifier	Description
	i			Perform case-insensitive matching
	g			Perform a global match (find all matches rather than stopping after the first match)
	m			Perform multiline matching
Brackets
	Expression	Description
	[abc]		Find any character between the brackets
	[^abc]		Find any character NOT between the brackets
	[0-9]		Find any character between the brackets (any digit)
	[^0-9]		Find any character NOT between the brackets (any non-digit)
	(x|y)		Find any of the alternatives specified
	
	Metacharacter	Description
	.				Find a single character, except newline or line terminator
	\w				Find a word character
	\W				Find a non-word character
	\d				Find a digit
	\D				Find a non-digit character
	\s				Find a whitespace character
	\S				Find a non-whitespace character
	\b				Find a match at the beginning/end of a word
	\B				Find a match not at the beginning/end of a word
	\0				Find a NUL character
	\n				Find a new line character
	\f				Find a form feed character
	\r				Find a carriage return character
	\t				Find a tab character
	\v				Find a vertical tab character
	\xxx			Find the character specified by an octal number xxx
	\xdd			Find the character specified by a hexadecimal number dd
	\uxxxx			Find the Unicode character specified by a hexadecimal number xxxx
	
	Quantifier	Description
	n+			Matches any string that contains at least one n
	n*			Matches any string that contains zero or more occurrences of n
	n?			Matches any string that contains zero or one occurrences of n
	n{X}		Matches any string that contains a sequence of X n's
	n{X,Y}		Matches any string that contains a sequence of X to Y n's
	n{X,}		Matches any string that contains a sequence of at least X n's
	n$			Matches any string with n at the end of it
	^n			Matches any string with n at the beginning of it
	?=n			Matches any string that is followed by a specific string n
	?!n			Matches any string that is not followed by a specific string n
	
	Property		Description
	constructor		Returns the function that created the RegExp object's prototype
	global			Checks whether the "g" modifier is set
	ignoreCase		Checks whether the "i" modifier is set
	lastIndex		Specifies the index at which to start the next match
	multiline		Checks whether the "m" modifier is set
	source			Returns the text of the RegExp pattern

	Method		Description
	compile()	Deprecated in version 1.5. Compiles a regular expression
	exec()		Tests for a match in a string. Returns the first match
	test()		Tests for a match in a string. Returns true or false
	toString()	Returns the string value of the regular expression
	
JavaScript Errors - Throw and Try to Catch
	The try statement lets you test a block of code for errors.
	The catch statement lets you handle the error.
	The throw statement lets you create custom errors.
	The finally statement lets you execute code, after try and catch, regardless of the result.
	
JavaScript Debugging
	The console.log() Method
	The debugger Keyword

JavaScript Hoisting
	Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope
	(to the top of the current script or the current function).
	
JavaScript Use Strict
	The "use strict" directive is new in JavaScript 1.8.5 (ECMAScript version 5).
	It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
	The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
	With strict mode, you can not, for example, use undeclared variables.

	Strict mode makes it easier to write "secure" JavaScript.
	Strict mode changes previously accepted "bad syntax" into real errors.
	As an example, in normal JavaScript, mistyping a variable name creates a new global variable. 
	In strict mode, this will throw an error, making it impossible to accidentally create a global variable.
	In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.
	In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property,
	a non-existing variable, or a non-existing object, will throw an error.

	Deleting a function is not allowed.
	Deleting a variable (or object) is not allowed.
	sing a variable, without declaring it, is not allowed:
	Using an object, without declaring it, is not allowed:
	Duplicating a parameter name is not allowed:
	Octal numeric literals are not allowed: var x = 010; 
	ctal escape characters are not allowed: var x = "\010";
	Writing to a read-only property is not allowed:
	Writing to a get-only property is not allowed:
	Deleting an undeletable property is not allowed:
	The string "eval" cannot be used as a variable:
	The string "arguments" cannot be used as a variable:
	The with statement is not allowed:
	In function calls like f(), the this value was the global object. In strict mode, it is now undefined.
	
	Future Proof!
	Future reserved keywords are not allowed in strict mode. These are:
	implements
	interface
	let
	package
	private
	protected
	public
	static
	yield
	
Inheritance with the prototype chain

	Following the ECMAScript standard, the notation someObject.[[Prototype]] is used to designate the prototype of someObject. 
	Since ECMAScript 2015, the [[Prototype]] is accessed using the accessors Object.getPrototypeOf() and Object.setPrototypeOf(). 
	This is equivalent to the JavaScript property __proto__ which is non-standard but de-facto implemented by many browsers.
	f.prototype.b = 3;
	var p = Object.create(o);
	One misfeature that is often used is to extend Object.prototype or one of the other built-in prototypes.
	This technique is called monkey patching and breaks encapsulation
	is necessary to use the hasOwnProperty method which all objects inherit from Object.prototype.
	
	
	
	
	
	
	
	
	
	
	
	
	#########################################################################################################################

JavaScript is single threaded and has a synchronous execution model. Single threaded means that one command is being executed at a time. 
Synchronous means one at a time i.e. one line of code is being executed at time in order the code appears. So in JavaScript one thing is happening at a time.

Execution Context

The JavaScript engine interacts with other engines in the browser. In the JavaScript execution stack there is global context at the bottom 
and then when we invoke functions the JavaScript engine creates new execution contexts for respective functions. When the called function 
exits its execution context is popped from the stack, and then next execution context is popped and so on...

For example

function abc()
{
   console.log('abc');
}


function xyz()
{
   abc()
   console.log('xyz');
}
var one = 1;
xyz();
In the above code a global execution context will be created and in this context var one will be stored and its value will be 1...
 when the xyz() invocation is called then a new execution context will be created and if we had defined any variable in xyz 
 function those variables would be stored in the execution context of xyz(). In the xyz function we invoke abc() and then the 
 abc() execution context is created and put on the execution stack... Now when abc() finishes its context is popped from stack,
 then the xyz() context is popped from stack and then global context will be popped...

Now about asynchronous callbacks; asynchronous means more than one at a time.

Just like the execution stack there is the Event Queue. When we want to be notified about some event in the JavaScript engine
 we can listen to that event, and that event is placed on the queue. For example an Ajax request event, or HTTP request event.

Whenever the execution stack is empty, like shown in above code example, the JavaScript engine periodically looks at the event 
queue and sees if there is any event to be notified about. For example in the queue there were two events, an ajax request and 
a HTTP request. It also looks to see if there is a function which needs to be run on that event trigger... So the JavaScript engine 
is notified about the event and knows the respective function to execute on that event... So the JavaScript engine 
invokes the handler function, in the example case, e.g. AjaxHandler() will be invoked and like always when a 
function is invoked its execution context is placed on the execution context and now the function execution finishes 
and the event ajax request is also removed from the event queue... When AjaxHandler() finishes the execution stack is empty 
so the engine again looks at the event queue and runs the event handler function of HTTP request which was next in queue. 
It is important to remember that the event queue is processed only when execution stack is empty.

For example see the code below explaining the execution stack and event queue handling by Javascript engine.

function waitfunction() {
    var a = 5000 + new Date().getTime();
    while (new Date() < a){}
    console.log('waitfunction() context will be popped after this line');
}

function clickHandler() {
    console.log('click event handler...');   
}

document.addEventListener('click', clickHandler);


waitfunction(); //a new context for this function is created and placed on the execution stack
console.log('global context will be popped after this line');
And

<html>
    <head>

    </head>
    <body>

        <script src="program.js"></script>
    </body>
</html>
Now run the webpage and click on the page, and see the output on console. The output will be

waitfunction() context will be popped after this line
global context will be emptied after this line
click event handler...
The JavaScript engine is running the code synchronously as explained in the execution context portion, the browser is asynchronously putting things in event
 queue. So the functions which take a very long time to complete can interrupt event handling. Things happening in a browser 
 like events are handled this way by JavaScript, if there is a listener supposed to run, the engine will run it when the execution
 stack is empty. And events are processed in the order they happen, so the asynchronous part is about what is happening outside the engine 
 i.e. what should the engine do when those outside events happen.

So JavaScript is always synchronous.

####################################################################################
Synchronous/Asynchronous HAS NOTHING TO DO WITH MULTI-THREADING.

Synchronous, or Synchronized means "connected", or "dependent" in some way. In other words, two synchronous tasks must be aware of one another, 
and one task must execute in some way that is dependent on the other, such as wait to start until the other task has completed.
Asynchronous means they are totally independent and neither one must consider the other in any way, either in initiation or in execution.

Synchronous (one thread):

1 thread ->   |<---A---->||<----B---------->||<------C----->|
Synchronous (multi-threaded):

thread A -> |<---A---->|   
                        \  
thread B ------------>   ->|<----B---------->|   
                                              \   
thread C ---------------------------------->   ->|<------C----->| 
Asynchronous (one thread):

         A-Start ------------------------------------------ A-End   
           | B-Start -----------------------------------------|--- B-End   
           |    |      C-Start ------------------- C-End      |      |   
           |    |       |                           |         |      |
           V    V       V                           V         V      V      
1 thread->|<-A-|<--B---|<-C-|-A-|-C-|--A--|-B-|--C-->|---A---->|--B-->| 
Asynchronous (multi-Threaded):

 thread A ->     |<---A---->|
 thread B ----->     |<----B---------->| 
 thread C --------->     |<------C--------->|
Start and end points of tasks A, B, C represented by <, > characters.
CPU time slices represented by vertical bars |
Technically, the concept of synchronous/asynchronous really does not have anything to do with threads. Although, in general,
 it is unusual to find asynchronous tasks running on the same thread, it is possible, (see below for examples) and it is common to find
 two or more tasks executing synchronously on separate threads... No, the concept of synchronous/asynchronous has to do solely with whether 
 or not a second or subsequent task can be initiated before the other (first) task has completed, or whether it must wait. That is all.
 What thread (or threads), or processes, or CPUs, or indeed, what hardware, the task[s] are executed on is not relevant. Indeed, 
 to make this point I have edited the graphics to show this.

ASYNCHRONOUS EXAMPLE. In solving many engineering problems, the software is designed to split up the overall problem into multiple individual tasks, 
and then execute them asynchronously. Inverting a matrix, or a finite element analysis problem, are good examples. In computing, sorting a list is an 
example. The quick sort routine, for example, splits the list into two lists, and sorts each of them by calling itself recursively. In both of the 
above examples, the two tasks can (and often were) executed asynchronously. They do not need to be on separate threads. Even a machine with one CPU,
 and only one thread of execution can be coded to initiate processing of a second task before a first one has completed. The only criterion is that 
 the results of one task are not necessary as inputs to the other task. As long as the start and end times of the tasks overlap, (possible only if the 
 output of neither is needed as inputs to the other), they are being executed asynchronously, no matter how many threads are in use.

SYNCHRONOUS EXAMPLE. Any process consisting of multiple tasks where the tasks must be executed in sequence, but one must be executed on 
another machine (Fetch and/or update data, get a stock quote from a financial service, etc.). If it's on a separate machine
 it is on a separate thread, whether synchronous or asynchronous.